"use strict";
// https://projects.100xdevs.com/tracks/gZf9uBBNSbBR7UCqyyqT/prisma-1 
// refer this for everything written over here , or ask 3G 
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
// Auto generated client : this are the kind of classes/client generated by the prisma so that we can use table directly in code 
// i.e, user.create(), user.update(), and etc ...
// everytime there is a change in prisma file , we need to run these commands compulsory 
//1. npx prisma migrate dev --name <message> --> to migrate the data 
//2. npx prisma generate --> to generate the client 
const client_1 = require("@prisma/client");
const prisma = new client_1.PrismaClient();
function insertUser(email, firstName, lastName, password) {
    return __awaiter(this, void 0, void 0, function* () {
        const res = yield prisma.user.create({
            data: {
                email,
                firstName,
                lastName,
                password
            }
        });
        console.log(res);
    });
}
function updateUser(email_1, _a) {
    return __awaiter(this, arguments, void 0, function* (email, { firstName, lastName }) {
        const res = yield prisma.user.update({
            data: {
                firstName,
                lastName
            },
            where: {
                email
            }
        });
        console.log(res);
    });
}
updateUser("hello.email", { firstName: "updatetest", lastName: "lastnameUpdate" });
